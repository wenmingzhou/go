package main

import "fmt"

/*
题目解析：
比如只有一个台阶，这个时候这只青蛙没有第二种选择，只能一次跳1级台阶，也就是只有一种跳法。
比如共有2个台阶呢？此时，这只青蛙就有两种选择了，第一种选择是一次跳1级，跳两次。第二种选择是一次跳2级，跳一次。
.......
那么共有n级台阶呢，通过大脑想这个过程实在是过于复杂，尤其n特别大时，已经超过了人脑的计算范围，
那么我们就只好借助计算机的超高能力的计算来得到结果了，我们分析一下。
倒过来思考一下，比如这只青蛙已经跳到了第n级台阶，此时它正站在第n级台阶上沾沾自喜呢，那么，它的上一步是什么呢？
因为青蛙一次只能跳1或2级台阶，所以，上一步这只青蛙一定在第n-1或者n-2级台阶上。
*/
//台阶数为n，设跳法为f(n)种，若n=1,有一种跳法
//        若n=2,有两种跳法
//        若n>2,最后一次剩余一个台阶的走法，则有f(n-1)种跳法，若最后一次剩余两个台阶，则有f(n-2)种跳法
//由上，f(n)=f(n-1)+f(n-2)

func taijie(n uint64) uint64 {
	if n == 1 {
		return 1
	} else if n == 2 {
		return 2
	} else {
		return taijie(n-1) + taijie(n-2)
	}
}
func main() {
	res := taijie(5)
	fmt.Println(res)

	var m rune
	m = '周'

	fmt.Println(m)

	fmt.Printf("%c", m)

}
